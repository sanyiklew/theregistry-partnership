{"version":3,"file":"BufferGeometryUtils.js","sourceRoot":"","sources":["../../../src/third_party/three/BufferGeometryUtils.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * @author mrdoob / http://mrdoob.com/\n */\nimport * as ThreeModule from 'three';\n\nconst THREE = {...ThreeModule};\n\nexport const BufferGeometryUtils = THREE.BufferGeometryUtils = {\n\n  computeTangents: function(geometry) {\n    var index = geometry.index;\n    var attributes = geometry.attributes;\n\n    // based on http://www.terathon.com/code/tangent.html\n    // (per vertex tangents)\n\n    if (index === null || attributes.position === undefined ||\n        attributes.normal === undefined || attributes.uv === undefined) {\n      console.warn(\n          'THREE.BufferGeometry: Missing required attributes (index, position, normal or uv) in BufferGeometry.computeTangents()');\n      return;\n    }\n\n    var indices = index.array;\n    var positions = attributes.position.array;\n    var normals = attributes.normal.array;\n    var uvs = attributes.uv.array;\n\n    var nVertices = positions.length / 3;\n\n    if (attributes.tangent === undefined) {\n      geometry.addAttribute(\n          'tangent',\n          new THREE.BufferAttribute(new Float32Array(4 * nVertices), 4));\n    }\n\n    var tangents = attributes.tangent.array;\n\n    var tan1 = [], tan2 = [];\n\n    for (var i = 0; i < nVertices; i++) {\n      tan1[i] = new THREE.Vector3();\n      tan2[i] = new THREE.Vector3();\n    }\n\n    var vA = new THREE.Vector3(), vB = new THREE.Vector3(),\n        vC = new THREE.Vector3(),\n\n        uvA = new THREE.Vector2(), uvB = new THREE.Vector2(),\n        uvC = new THREE.Vector2(),\n\n        sdir = new THREE.Vector3(), tdir = new THREE.Vector3();\n\n    function handleTriangle(a, b, c) {\n      vA.fromArray(positions, a * 3);\n      vB.fromArray(positions, b * 3);\n      vC.fromArray(positions, c * 3);\n\n      uvA.fromArray(uvs, a * 2);\n      uvB.fromArray(uvs, b * 2);\n      uvC.fromArray(uvs, c * 2);\n\n      var x1 = vB.x - vA.x;\n      var x2 = vC.x - vA.x;\n\n      var y1 = vB.y - vA.y;\n      var y2 = vC.y - vA.y;\n\n      var z1 = vB.z - vA.z;\n      var z2 = vC.z - vA.z;\n\n      var s1 = uvB.x - uvA.x;\n      var s2 = uvC.x - uvA.x;\n\n      var t1 = uvB.y - uvA.y;\n      var t2 = uvC.y - uvA.y;\n\n      var r = 1.0 / (s1 * t2 - s2 * t1);\n\n      sdir.set(\n          (t2 * x1 - t1 * x2) * r,\n          (t2 * y1 - t1 * y2) * r,\n          (t2 * z1 - t1 * z2) * r);\n\n      tdir.set(\n          (s1 * x2 - s2 * x1) * r,\n          (s1 * y2 - s2 * y1) * r,\n          (s1 * z2 - s2 * z1) * r);\n\n      tan1[a].add(sdir);\n      tan1[b].add(sdir);\n      tan1[c].add(sdir);\n\n      tan2[a].add(tdir);\n      tan2[b].add(tdir);\n      tan2[c].add(tdir);\n    }\n\n    var groups = geometry.groups;\n\n    if (groups.length === 0) {\n      groups = [{start: 0, count: indices.length}];\n    }\n\n    for (var i = 0, il = groups.length; i < il; ++i) {\n      var group = groups[i];\n\n      var start = group.start;\n      var count = group.count;\n\n      for (var j = start, jl = start + count; j < jl; j += 3) {\n        handleTriangle(indices[j + 0], indices[j + 1], indices[j + 2]);\n      }\n    }\n\n    var tmp = new THREE.Vector3(), tmp2 = new THREE.Vector3();\n    var n = new THREE.Vector3(), n2 = new THREE.Vector3();\n    var w, t, test;\n\n    function handleVertex(v) {\n      n.fromArray(normals, v * 3);\n      n2.copy(n);\n\n      t = tan1[v];\n\n      // Gram-Schmidt orthogonalize\n\n      tmp.copy(t);\n      tmp.sub(n.multiplyScalar(n.dot(t))).normalize();\n\n      // Calculate handedness\n\n      tmp2.crossVectors(n2, t);\n      test = tmp2.dot(tan2[v]);\n      w = (test < 0.0) ? -1.0 : 1.0;\n\n      tangents[v * 4] = tmp.x;\n      tangents[v * 4 + 1] = tmp.y;\n      tangents[v * 4 + 2] = tmp.z;\n      tangents[v * 4 + 3] = w;\n    }\n\n    for (var i = 0, il = groups.length; i < il; ++i) {\n      var group = groups[i];\n\n      var start = group.start;\n      var count = group.count;\n\n      for (var j = start, jl = start + count; j < jl; j += 3) {\n        handleVertex(indices[j + 0]);\n        handleVertex(indices[j + 1]);\n        handleVertex(indices[j + 2]);\n      }\n    }\n  },\n\n  /**\n   * @param  {Array<THREE.BufferGeometry>} geometries\n   * @param  {Boolean} useGroups\n   * @return {THREE.BufferGeometry}\n   */\n  mergeBufferGeometries: function(geometries, useGroups) {\n    var isIndexed = geometries[0].index !== null;\n\n    var attributesUsed = new Set(Object.keys(geometries[0].attributes));\n    var morphAttributesUsed =\n        new Set(Object.keys(geometries[0].morphAttributes));\n\n    var attributes = {};\n    var morphAttributes = {};\n\n    var mergedGeometry = new THREE.BufferGeometry();\n\n    var offset = 0;\n\n    for (var i = 0; i < geometries.length; ++i) {\n      var geometry = geometries[i];\n\n      // ensure that all geometries are indexed, or none\n\n      if (isIndexed !== (geometry.index !== null))\n        return null;\n\n      // gather attributes, exit early if they're different\n\n      for (var name in geometry.attributes) {\n        if (!attributesUsed.has(name))\n          return null;\n\n        if (attributes[name] === undefined)\n          attributes[name] = [];\n\n        attributes[name].push(geometry.attributes[name]);\n      }\n\n      // gather morph attributes, exit early if they're different\n\n      for (var name in geometry.morphAttributes) {\n        if (!morphAttributesUsed.has(name))\n          return null;\n\n        if (morphAttributes[name] === undefined)\n          morphAttributes[name] = [];\n\n        morphAttributes[name].push(geometry.morphAttributes[name]);\n      }\n\n      // gather .userData\n\n      mergedGeometry.userData.mergedUserData =\n          mergedGeometry.userData.mergedUserData || [];\n      mergedGeometry.userData.mergedUserData.push(geometry.userData);\n\n      if (useGroups) {\n        var count;\n\n        if (isIndexed) {\n          count = geometry.index.count;\n\n        } else if (geometry.attributes.position !== undefined) {\n          count = geometry.attributes.position.count;\n\n        } else {\n          return null;\n        }\n\n        mergedGeometry.addGroup(offset, count, i);\n\n        offset += count;\n      }\n    }\n\n    // merge indices\n\n    if (isIndexed) {\n      var indexOffset = 0;\n      var mergedIndex = [];\n\n      for (var i = 0; i < geometries.length; ++i) {\n        var index = geometries[i].index;\n\n        for (var j = 0; j < index.count; ++j) {\n          mergedIndex.push(index.getX(j) + indexOffset);\n        }\n\n        indexOffset += geometries[i].attributes.position.count;\n      }\n\n      mergedGeometry.setIndex(mergedIndex);\n    }\n\n    // merge attributes\n\n    for (var name in attributes) {\n      var mergedAttribute = this.mergeBufferAttributes(attributes[name]);\n\n      if (!mergedAttribute)\n        return null;\n\n      mergedGeometry.addAttribute(name, mergedAttribute);\n    }\n\n    // merge morph attributes\n\n    for (var name in morphAttributes) {\n      var numMorphTargets = morphAttributes[name][0].length;\n\n      if (numMorphTargets === 0)\n        break;\n\n      mergedGeometry.morphAttributes = mergedGeometry.morphAttributes || {};\n      mergedGeometry.morphAttributes[name] = [];\n\n      for (var i = 0; i < numMorphTargets; ++i) {\n        var morphAttributesToMerge = [];\n\n        for (var j = 0; j < morphAttributes[name].length; ++j) {\n          morphAttributesToMerge.push(morphAttributes[name][j][i]);\n        }\n\n        var mergedMorphAttribute =\n            this.mergeBufferAttributes(morphAttributesToMerge);\n\n        if (!mergedMorphAttribute)\n          return null;\n\n        mergedGeometry.morphAttributes[name].push(mergedMorphAttribute);\n      }\n    }\n\n    return mergedGeometry;\n  },\n\n  /**\n   * @param {Array<THREE.BufferAttribute>} attributes\n   * @return {THREE.BufferAttribute}\n   */\n  mergeBufferAttributes: function(attributes) {\n    var TypedArray;\n    var itemSize;\n    var normalized;\n    var arrayLength = 0;\n\n    for (var i = 0; i < attributes.length; ++i) {\n      var attribute = attributes[i];\n\n      if (attribute.isInterleavedBufferAttribute)\n        return null;\n\n      if (TypedArray === undefined)\n        TypedArray = attribute.array.constructor;\n      if (TypedArray !== attribute.array.constructor)\n        return null;\n\n      if (itemSize === undefined)\n        itemSize = attribute.itemSize;\n      if (itemSize !== attribute.itemSize)\n        return null;\n\n      if (normalized === undefined)\n        normalized = attribute.normalized;\n      if (normalized !== attribute.normalized)\n        return null;\n\n      arrayLength += attribute.array.length;\n    }\n\n    var array = new TypedArray(arrayLength);\n    var offset = 0;\n\n    for (var i = 0; i < attributes.length; ++i) {\n      array.set(attributes[i].array, offset);\n\n      offset += attributes[i].array.length;\n    }\n\n    return new THREE.BufferAttribute(array, itemSize, normalized);\n  },\n\n  /**\n   * @param {Array<THREE.BufferAttribute>} attributes\n   * @return {Array<THREE.InterleavedBufferAttribute>}\n   */\n  interleaveAttributes: function(attributes) {\n    // Interleaves the provided attributes into an InterleavedBuffer and returns\n    // a set of InterleavedBufferAttributes for each attribute\n    var TypedArray;\n    var arrayLength = 0;\n    var stride = 0;\n\n    // calculate the the length and type of the interleavedBuffer\n    for (var i = 0, l = attributes.length; i < l; ++i) {\n      var attribute = attributes[i];\n\n      if (TypedArray === undefined)\n        TypedArray = attribute.array.constructor;\n      if (TypedArray !== attribute.array.constructor) {\n        console.warn(\n            'AttributeBuffers of different types cannot be interleaved');\n        return null;\n      }\n\n      arrayLength += attribute.array.length;\n      stride += attribute.itemSize;\n    }\n\n    // Create the set of buffer attributes\n    var interleavedBuffer =\n        new THREE.InterleavedBuffer(new TypedArray(arrayLength), stride);\n    var offset = 0;\n    var res = [];\n    var getters = ['getX', 'getY', 'getZ', 'getW'];\n    var setters = ['setX', 'setY', 'setZ', 'setW'];\n\n    for (var j = 0, l = attributes.length; j < l; j++) {\n      var attribute = attributes[j];\n      var itemSize = attribute.itemSize;\n      var count = attribute.count;\n      var iba = new THREE.InterleavedBufferAttribute(\n          interleavedBuffer, itemSize, offset, attribute.normalized);\n      res.push(iba);\n\n      offset += itemSize;\n\n      // Move the data for each attribute into the new interleavedBuffer\n      // at the appropriate offset\n      for (var c = 0; c < count; c++) {\n        for (var k = 0; k < itemSize; k++) {\n          iba[setters[k]](c, attribute[getters[k]](c));\n        }\n      }\n    }\n\n    return res;\n  },\n\n  /**\n   * @param {Array<THREE.BufferGeometry>} geometry\n   * @return {number}\n   */\n  estimateBytesUsed: function(geometry) {\n    // Return the estimated memory used by this geometry in bytes\n    // Calculate using itemSize, count, and BYTES_PER_ELEMENT to account\n    // for InterleavedBufferAttributes.\n    var mem = 0;\n    for (var name in geometry.attributes) {\n      var attr = geometry.getAttribute(name);\n      mem += attr.count * attr.itemSize * attr.array.BYTES_PER_ELEMENT;\n    }\n\n    var indices = geometry.getIndex();\n    mem += indices ?\n        indices.count * indices.itemSize * indices.array.BYTES_PER_ELEMENT :\n        0;\n    return mem;\n  },\n\n  /**\n   * @param {THREE.BufferGeometry} geometry\n   * @param {number} tolerance\n   * @return {THREE.BufferGeometry>}\n   */\n  mergeVertices: function(geometry, tolerance = 1e-4) {\n    tolerance = Math.max(tolerance, Number.EPSILON);\n\n    // Generate an index buffer if the geometry doesn't have one, or optimize it\n    // if it's already available.\n    var hashToIndex = {};\n    var indices = geometry.getIndex();\n    var positions = geometry.getAttribute('position');\n    var vertexCount = indices ? indices.count : positions.count;\n\n    // next value for triangle indices\n    var nextIndex = 0;\n\n    // attributes and new attribute arrays\n    var attributeNames = Object.keys(geometry.attributes);\n    var attrArrays = {};\n    var morphAttrsArrays = {};\n    var newIndices = [];\n    var getters = ['getX', 'getY', 'getZ', 'getW'];\n\n    // initialize the arrays\n    for (var i = 0, l = attributeNames.length; i < l; i++) {\n      var name = attributeNames[i];\n\n      attrArrays[name] = [];\n\n      var morphAttr = geometry.morphAttributes[name];\n      if (morphAttr) {\n        morphAttrsArrays[name] =\n            new Array(morphAttr.length).fill().map(() => []);\n      }\n    }\n\n    // convert the error tolerance to an amount of decimal places to truncate to\n    var decimalShift = Math.log10(1 / tolerance);\n    var shiftMultiplier = Math.pow(10, decimalShift);\n    for (var i = 0; i < vertexCount; i++) {\n      var index = indices ? indices.getX(i) : i;\n\n      // Generate a hash for the vertex attributes at the current index 'i'\n      var hash = '';\n      for (var j = 0, l = attributeNames.length; j < l; j++) {\n        var name = attributeNames[j];\n        var attribute = geometry.getAttribute(name);\n        var itemSize = attribute.itemSize;\n\n        for (var k = 0; k < itemSize; k++) {\n          // double tilde truncates the decimal value\n          hash += `${~~(attribute[getters[k]](index) * shiftMultiplier)},`;\n        }\n      }\n\n      // Add another reference to the vertex if it's already\n      // used by another index\n      if (hash in hashToIndex) {\n        newIndices.push(hashToIndex[hash]);\n\n      } else {\n        // copy data to the new index in the attribute arrays\n        for (var j = 0, l = attributeNames.length; j < l; j++) {\n          var name = attributeNames[j];\n          var attribute = geometry.getAttribute(name);\n          var morphAttr = geometry.morphAttributes[name];\n          var itemSize = attribute.itemSize;\n          var newarray = attrArrays[name];\n          var newMorphArrays = morphAttrsArrays[name];\n\n          for (var k = 0; k < itemSize; k++) {\n            var getterFunc = getters[k];\n            newarray.push(attribute[getterFunc](index));\n\n            if (morphAttr) {\n              for (var m = 0, ml = morphAttr.length; m < ml; m++) {\n                newMorphArrays[m].push(morphAttr[m][getterFunc](index));\n              }\n            }\n          }\n        }\n\n        hashToIndex[hash] = nextIndex;\n        newIndices.push(nextIndex);\n        nextIndex++;\n      }\n    }\n\n    // Generate typed arrays from new attribute arrays and update\n    // the attributeBuffers\n    const result = geometry.clone();\n    for (var i = 0, l = attributeNames.length; i < l; i++) {\n      var name = attributeNames[i];\n      var oldAttribute = geometry.getAttribute(name);\n      var attribute;\n\n      var buffer = new oldAttribute.array.constructor(attrArrays[name]);\n      if (oldAttribute.isInterleavedBufferAttribute) {\n        attribute = new THREE.BufferAttribute(\n            buffer, oldAttribute.itemSize, oldAttribute.itemSize);\n\n      } else {\n        attribute = geometry.getAttribute(name).clone();\n        attribute.setArray(buffer);\n      }\n\n      result.addAttribute(name, attribute);\n\n      // Update the attribute arrays\n      if (name in morphAttrsArrays) {\n        for (var j = 0; j < morphAttrsArrays[name].length; j++) {\n          var morphAttribute = geometry.morphAttributes[name][j].clone();\n          morphAttribute.setArray(\n              new morphAttribute.array.constructor(morphAttrsArrays[name][j]));\n          result.morphAttributes[name][j] = morphAttribute;\n        }\n      }\n    }\n\n    // Generate an index buffer typed array\n    var cons = Uint8Array;\n    if (newIndices.length >= Math.pow(2, 8))\n      cons = Uint16Array;\n    if (newIndices.length >= Math.pow(2, 16))\n      cons = Uint32Array;\n\n    var newIndexBuffer = new cons(newIndices);\n    var newIndices = null;\n    if (indices === null) {\n      newIndices = new THREE.BufferAttribute(newIndexBuffer, 1);\n\n    } else {\n      newIndices = geometry.getIndex().clone();\n      newIndices.setArray(newIndexBuffer);\n    }\n\n    result.setIndex(newIndices);\n\n    return result;\n  }\n\n};\n"]}