{"version":3,"file":"conversions.js","sourceRoot":"","sources":["../src/conversions.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;AAEH,OAAO,EAAC,IAAI,IAAI,SAAS,EAAC,MAAM,OAAO,CAAC;AACxC,OAAO,EAAC,WAAW,EAAY,MAAM,cAAc,CAAC;AAGpD;;;;;;GAMG;AACH,MAAM,uBAAuB,GAAG,CAAC,eAA0B,EAAU,EAAE;IACrE,MAAM,KAAK,GAAG,UAAU,CAAC,eAAe,CAAC,KAAY,CAAC,CAAC;IAEvD,IAAK,IAAY,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;QAC9B,OAAO,CAAC,CAAC;KACV;IAED,IAAI,KAAK,CAAC;IAEV,QAAQ,eAAe,CAAC,IAAI,EAAE;QAC5B,QAAQ;QACR,KAAK,GAAG;YACN,KAAK,GAAG,CAAC,CAAC;YACV,MAAM;QACR,KAAK,IAAI;YACP,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC;YAChB,MAAM;QACR,KAAK,IAAI;YACP,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC;YACjB,MAAM;KACT;IAED,OAAO,KAAK,GAAG,KAAK,CAAC;AACvB,CAAC,CAAC;AAEF;;;;;;;GAOG;AACH,MAAM,uBAAuB,GAAG,CAAC,cAAyB,EAAU,EAAE;IACpE,MAAM,KAAK,GAAG,UAAU,CAAC,cAAc,CAAC,KAAY,CAAC,CAAC;IAEtD,IAAK,IAAY,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;QAC9B,OAAO,CAAC,CAAC;KACV;IAED,OAAO,cAAc,CAAC,IAAI,KAAK,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;AAC3E,CAAC,CAAC;AAEF;;;;;;;;;;;;GAYG;AACH,MAAM,CAAC,MAAM,oBAAoB,GAC7B,CAAC,eAAuB,EAAwC,EAAE;IAChE,IAAI;QACF,MAAM,mBAAmB,GAAG,WAAW,CAAC,eAAe,CAAC,CAAC;QAEzD,IAAI,mBAAmB,CAAC,MAAM,KAAK,CAAC,EAAE;YACpC,MAAM,CAAC,SAAS,EAAE,OAAO,EAAE,UAAU,CAAC,GAAG,mBAAmB,CAAC;YAE7D,MAAM,KAAK,GAAG,uBAAuB,CAAC,SAAS,CAAC,CAAC;YACjD,MAAM,GAAG,GAAG,uBAAuB,CAAC,OAAO,CAAC,CAAC;YAC7C,MAAM,MAAM,GAAG,UAAU,CAAC,KAAK,KAAK,MAAM,CAAC,CAAC;gBACxC,MAAM,CAAC,CAAC;gBACR,uBAAuB,CAAC,UAAU,CAAC,CAAC;YAExC,OAAO,CAAC,KAAK,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;SAC7B;KACF;IAAC,OAAO,MAAM,EAAE;KAChB;IAED,OAAO,IAAI,CAAC;AACd,CAAC,CAAC","sourcesContent":["/*\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Math as ThreeMath} from 'three';\nimport {parseValues, ValueNode} from './parsers.js';\n\n\n/**\n * Converts a length-like ValueNode to meters expressed as a number. Currently,\n * only ValueNodes that represent a metric value (m, cm, mm) are supported.\n *\n * If no unit is specified, assumes meters. Returns 0 for a ValueNode that\n * cannot be parsed.\n */\nconst lengthValueNodeToMeters = (lengthValueNode: ValueNode): number => {\n  const value = parseFloat(lengthValueNode.value as any);\n\n  if ((self as any).isNaN(value)) {\n    return 0;\n  }\n\n  let scale;\n\n  switch (lengthValueNode.unit) {\n    default:\n    case 'm':\n      scale = 1;\n      break;\n    case 'cm':\n      scale = 1 / 100;\n      break;\n    case 'mm':\n      scale = 1 / 1000;\n      break;\n  }\n\n  return value * scale;\n};\n\n/**\n * Converts an angle-like ValueNode to radians expressed as a number. Currently,\n * only ValueNodes that represent an angle expressed in degrees (deg) or radians\n * (rad) are supported.\n *\n * Assumes radians if unit is not specified or recognized. Returns 0 for a\n * ValueNode that cannot be parsed.\n */\nconst angleValueNodeToRadians = (angleValueNode: ValueNode): number => {\n  const value = parseFloat(angleValueNode.value as any);\n\n  if ((self as any).isNaN(value)) {\n    return 0;\n  }\n\n  return angleValueNode.unit === 'deg' ? ThreeMath.degToRad(value) : value;\n};\n\n/**\n * Spherical String => Spherical Values\n *\n * Converts a \"spherical string\" to values suitable for assigning to a Three.js\n * Spherical object. Position strings are of the form \"$theta $phi $radius\".\n * Accepted units for theta and phi are radians (rad) and degrees (deg).\n * Accepted units for radius include meters (m), centimeters (cm) and\n * millimeters (mm), or auto. If radius is set to auto, it implies that the\n * consumer of the deserialized values has some idealized notion of the radius\n * that should be applied.\n *\n * Returns null if the spherical string cannot be parsed.\n */\nexport const deserializeSpherical =\n    (sphericalString: string): [number, number, number|string]|null => {\n      try {\n        const sphericalValueNodes = parseValues(sphericalString);\n\n        if (sphericalValueNodes.length === 3) {\n          const [thetaNode, phiNode, radiusNode] = sphericalValueNodes;\n\n          const theta = angleValueNodeToRadians(thetaNode);\n          const phi = angleValueNodeToRadians(phiNode);\n          const radius = radiusNode.value === 'auto' ?\n              'auto' :\n              lengthValueNodeToMeters(radiusNode);\n\n          return [theta, phi, radius];\n        }\n      } catch (_error) {\n      }\n\n      return null;\n    };\n\n"]}